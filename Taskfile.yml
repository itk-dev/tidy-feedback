version: "3"

# https://taskfile.dev/usage/#env-files
dotenv: [".env.local", ".env"]

includes:
    widget:
        # https://taskfile.dev/usage/#directory-of-included-taskfile
        taskfile: ./widget
        dir: ./widget

vars:
    DOCKER_COMPOSE: '{{.TASK_DOCKER_COMPOSE | default "docker compose"}}'
    APP_DOCKER_COMPOSE: docker compose --profile app

tasks:
    compose:
        cmds:
            - "{{.DOCKER_COMPOSE}} {{.CLI_ARGS}}"

    composer:
        cmds:
            - task compose -- run --rm phpfpm composer {{.CLI_ARGS}}
        silent: true

    assets:build:
        desc: Build assets
        cmds:
            - task: npm
              vars:
                  TASK_ARGS: install
            - task compose -- run --interactive --rm node node_modules/.bin/encore production --progress

            # Build widget and copy result
            - task: widget:build
            - rsync -azv widget/static/dist/standalone build/
        silent: true

    assets:watch:
        desc: Build assets and watch for changes
        cmds:
            - task: assets:build
            - task compose -- run --interactive --rm node node_modules/.bin/encore dev --watch
        silent: true

    translations:extract:
        cmds:
            - task compose -- run --rm symfony /app/task/scripts/translations-extract
            - task: coding-standards:yaml:apply

    npm:
        cmds:
            - task compose -- run --rm node npm {{.TASK_ARGS}} {{.CLI_ARGS}}

    coding-standards:apply:
        desc: "Apply coding standards"
        cmds:
            - task: coding-standards:assets:apply
            - task: coding-standards:composer:apply
            - task: coding-standards:markdown:apply
            - task: coding-standards:php:apply
            - task: coding-standards:twig:apply
            - task: coding-standards:yaml:apply
        silent: true

    coding-standards:check:
        desc: "Apply coding standards"
        cmds:
            - task: coding-standards:assets:check
            - task: coding-standards:composer:check
            - task: coding-standards:markdown:check
            - task: coding-standards:php:check
            - task: coding-standards:twig:check
            - task: coding-standards:yaml:check
        silent: true

    coding-standards:assets:apply:
        desc: "Apply coding standards for assets"
        cmds:
            - task compose -- run --rm prettier 'assets/' --write

    coding-standards:assets:check:
        desc: "Apply and check coding standards for assets"
        cmds:
            - task: coding-standards:assets:apply
            - task compose -- run --rm prettier 'assets/' --check

    coding-standards:composer:apply:
        desc: "Apply coding standards for Composer"
        cmds:
            - task composer -- normalize

    coding-standards:composer:check:
        desc: "Apply and check coding standards for Composer"
        cmds:
            - task: coding-standards:composer:apply
            - task composer -- audit
            - task composer -- normalize --dry-run
            - task composer -- validate --strict

    coding-standards:markdown:apply:
        desc: "Apply coding standards for Markdown"
        cmds:
            - task compose -- run --rm markdownlint '**/*.md' --fix

    coding-standards:markdown:check:
        desc: "Apply and check coding standards for Markdown"
        cmds:
            - task: coding-standards:markdown:apply
            - task compose -- run --rm markdownlint '**/*.md'

    coding-standards:php:apply:
        desc: "Apply coding standards for PHP"
        cmds:
            - task compose -- run --rm phpfpm vendor/bin/rector
            - task compose -- run --rm phpfpm vendor/bin/php-cs-fixer fix
            - task compose -- run --rm phpfpm vendor/bin/phpcbf
        silent: true

    coding-standards:php:check:
        desc: "Apply and check coding standards for PHP"
        cmds:
            - task: coding-standards:php:apply
            - task compose -- run --rm phpfpm vendor/bin/rector --dry-run
            - task compose -- run --rm phpfpm vendor/bin/php-cs-fixer check
            - task compose -- run --rm phpfpm vendor/bin/phpcs
        silent: true

    coding-standards:shell:check:
        desc: "Check coding standards for shell scripts"
        cmds:
            # https://github.com/koalaman/shellcheck?tab=readme-ov-file#installing
            - docker run --rm --volume "$PWD:"/mnt koalaman/shellcheck:stable {{.GLOB}}
        vars:
            # We use a block scalar (https://yaml-multiline.info/#block-scalars) here to make escaping (a little) easier.
            GLOB: >-
                {{.CLI_ARGS | default "task/scripts/*"}}

    coding-standards:twig:apply:
        desc: "Apply coding standards for Twig"
        cmds:
            - task compose -- run --rm phpfpm vendor/bin/twig-cs-fixer fix
        silent: true

    coding-standards:twig:check:
        desc: "Apply and check coding standards for Twig"
        cmds:
            - task: coding-standards:twig:apply
            - task compose -- run --rm phpfpm vendor/bin/twig-cs-fixer check
        silent: true

    coding-standards:yaml:apply:
        desc: "Apply coding standards for YAML"
        cmds:
            - task compose -- run --rm prettier --parser yaml '**/*.{yml,yaml}' --write

    coding-standards:yaml:check:
        desc: "Apply and check coding standards for YAML"
        cmds:
            - task: coding-standards:yaml:apply
            - task compose -- run --rm prettier --parser yaml '**/*.{yml,yaml}' --check

    code-analysis:
        cmds:
            - task compose -- run --rm phpfpm vendor/bin/phpstan

    app:start:
        desc: Start Symfony app with Tity feedback installed
        cmds:
            - |
                echo ------------------------------------------------------------------------------------------------
                echo For reasons yet unknown, you may have to run this command 2 or 3 times to make everything work â€¦
                echo ------------------------------------------------------------------------------------------------

            - task app:compose -- pull
            - task app:compose -- up --detach --remove-orphans --wait

            - task app:compose -- exec symfony composer config repositories.tidy-feedback path /app
            # https://github.com/itk-dev/tidy-feedback?tab=readme-ov-file#installation
            - task app:compose -- exec symfony composer require itk-dev/tidy-feedback:dev-main

            # https://github.com/itk-dev/tidy-feedback?tab=readme-ov-file#symfony
            - task app:compose -- exec symfony cp /app/resources/config/routes/tidy_feedback.yaml config/routes/
            - task app:compose -- exec symfony bin/console cache:clear

            - task app:compose -- exec symfony bin/console tidy-feedback:doctrine:schema-update
            - task app:open
        silent: true

    app:stop:
        desc: Stop Symfony app
        cmds:
            - task app:compose -- down --remove-orphans

    app:open:
        desc: Open Symfony app
        cmds:
            - open "http://$(task app:compose -- port symfony 80)/tidy-feedback/test"

    app:compose:
        cmds:
            - "{{.APP_DOCKER_COMPOSE}} {{.CLI_ARGS}}"

    default:
        cmds:
            - task --list-all
        silent: true
